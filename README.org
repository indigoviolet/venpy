
* venpy

Python utilities that Venky likes


** Cache

Memoization that works on functions, instance methods, classmethods etc. The
cache object is not global, it lives on the function object or the instance or
the class.


#+begin_example python
@cache
def memoized_function(x, bar, baz):
    ...


class Memo:
    @cache
    @classmethod
    def memoized_clsmethod(cls, x, bar, baz):
        ...

    @cache
    def memoized_instmethod(self, x, bar, baz):
        ...
#+end_example


** index_by

Construct an index of a collection based on a key function (or a hashable
item-type). Supports unique =k->v= indexes, set-based =k->{v}=, or list-based =k->[v]=
indexes.


#+begin_example

    items = [1, 2, 2, 4, 3, 3, 5]
    by_func: Callable[[int], int] = lambda i: i % 2

    uniq_idx = index_by(items, by=by_func)
    set_idx = index_by(items, by=by_func, collection="set")
    list_idx = index_by(items, by=by_func, collection="list")

    assert uniq_idx == {1: 5, 0: 4}
    assert set_idx == {1: set([1, 3, 5]), 0: set([2, 4])}
    assert list_idx == {1: [1, 3, 3, 5], 0: [2, 2, 4]}

#+end_example

** keydefaultdict

Create a defaultdict whose factory function takes the key as argument.

** none_throws

Utility function that throws an exception if its argument is None

** ContextMixin

Create classes that behave as context managers, but implement them as generators
instead of working with ~__enter__/__exit__~: override the ~__context__~ method
